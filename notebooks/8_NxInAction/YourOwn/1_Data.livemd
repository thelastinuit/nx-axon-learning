# Nx in Action/ Your Own / Data

```elixir
Mix.install([
  {:nx, "~> 0.3.0", override: true},
  {:explorer, "~> 0.2.0"},
  {:kino, "~> 0.6.2"},
  {:kino_vega_lite, "~> 0.1.3"},
  {:scidata, "~> 0.1.9"},
  {:vega_lite, "~> 0.1.5"}
])
```

## The Plan

1. Define the problem
2. Prepare the data
3. Evaluate the algorithms
4. Choose the model
5. Enhance the model
6. Make the predictions

## Get ready

Find a publicly available dataset of your own like those on [Kaggle](https://www.kaggle.com/datasets) or [OpenML](https://www.openml.org/). Or, try this one we included with the training repo.

[Boston house-price data](http://lib.stat.cmu.edu/datasets/boston)

The Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic prices and the demand for clean air', J. Environ. Economics & Management, vol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics ...', Wiley, 1980.   N.B. Various transformations are used in the table on pages 244-261 of the latter.

## Define the problem

What can you predict?

## Prepare the data

```elixir
alias Explorer.DataFrame
alias Explorer.Series

csv = "elixir_conf/data/boston.csv"
df = DataFrame.from_csv!(csv)

DataFrame.shape(df)
```

```elixir
DataFrame.n_rows(df)
```

```elixir
DataFrame.n_columns(df)
```

```elixir
DataFrame.names(df)
```

### Visualize & Analyze

DIY with SmartCells

<!-- livebook:{"break_markdown":true} -->

### Create a Training Set

You could decide to put 70% of the rows in a training set and 30% in a testing set.

```elixir

```

### Features & Targets

DIY

```elixir

```

#### Feature Normalization

DIY

```elixir

```

#### Target Normalization

DIY

```elixir

```
