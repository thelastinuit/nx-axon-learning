# Machine Learning / Algorithms & Models / Classification

```elixir
Mix.install([
  {:essence, "~> 0.2.0"},
  {:paasaa, "~> 0.6.0"},
  {:req, "~> 0.3.0"},
  {:kino_vega_lite, "~> 0.1.3"}
])
```

## Goal

This lesson will provide a brief introduction to classification algorithms in machine learning to understand why they are commonly used. We will also look at how the algorithms solve real-world problems.

## Overview

In the last section we learned that ML algorithms are basically procedures run on data that output models. We also identified several well-known algorithms; let's look at each of them a bit more closely to see how and why they are best put to use to solve particular problems.

## Supervised Learning Algorithms: Classification

In machine learning, classification assigns an object as a member of a category or group. For example, classifiers are used to detect if an email is spam or if a transaction is fraudulent.

<!-- livebook:{"break_markdown":true} -->

### Naive Bayes

A naive bayes model uses probability to classify objects based on features. It is a classification approach that employs the Bayes Theorem (principle of class conditional independence). The presence of one feature does not impact the presence of another in the probability of a given outcome.

### Uses

* text classification
* spam detection
* recommendation engines

<!-- livebook:{"break_markdown":true} -->

<hr style="background-color: #800080;height: 15.0px;" />

## Brain Break!

<span style="color: #800080; font-size: 24px; font-weight: bold;">
Time for some Elixir
</span>

<img src="https://static.thenounproject.com/png/1111032-200.png" alt="Brain icon" style="width: 85px; float: left; margin-bottom: 10px; margin-right: 20px;" />

[Paasaa](https://github.com/minibikini/paasaa) is Natural language detection for Elixir. To make the most of this library we need a few documents. Use [Req](https://github.com/wojtekmach/req) to get them from Project Gutenburg.

Use the Essence library we explored in an earlier section to read the plain text.

```elixir
doc =
  "https://www.gutenberg.org/cache/epub/22160/pg22160.txt"
  |> Req.get!()
  |> Map.get(:body)
  |> Essence.Document.from_text()
  |> then(fn d -> Essence.Document.sentence(d, 54) end)
  |> Enum.take(10)
  |> Enum.join(" ")
```

What language is this document written in?

```elixir
doc |> Paasaa.detect()
```

To be sure, check all the languages. This will display the language along with the probability that the text is in that language.

```elixir
doc |> Paasaa.all()
```

Try more:

```elixir
"La ventura va guiando nuestras cosas mejor de lo que acertáramos a desear"
|> Paasaa.detect()
```

```elixir
"Prova autorevole del Diavolo, emiliani sconfitti con un gol per tempo. A segno anche Giroud"
|> Paasaa.detect()
```

```elixir
"Santrfor mevkisine İcardi ya da Umut Bozok’tan birini alacak olan yönetim"
|> Paasaa.detect()
```

##### Challenge

What more could you combine with the Essence library? Could the concordance feature combined with language detection give you a sense for what words appear near high frequency words much like the next classification algorithm we are about to cover: k Nearest Neighbors.

<!-- livebook:{"break_markdown":true} -->

<hr style="background-color: #800080;height: 15.0px;" />

<!-- livebook:{"break_markdown":true} -->

### k Nearest Neighbors

K nearest neighbors (KNN) classifies data points based on their proximity and association to other available data to discover the most frequent or average characteristics shared among the objects. It assumes that similar data points can be found near each other and therefore calculates the distance between data points.

### Uses

* problems with smaller datasets because the processing time grows as the size of the data grows
* recommendation engines
* image recognition

<!-- livebook:{"break_markdown":true} -->

### Decision Trees & Random Forest

Decision trees are classifiers that determine which category an input belongs to by traversing the leaves and nodes of a tree. They are like a flow chart where the class of an object is determined step-by-step using certain known conditions.

A Random Forest is a collection of several decision trees from random subsets of the data. The result is a combination of trees that may make more accurate predictions than a single decision tree.

<!-- livebook:{"break_markdown":true} -->

### Uses

* classification
* regression

<!-- livebook:{"break_markdown":true} -->

[<span style="float: left; color: #800080; font-weight: bold; font-family: FreeMono, monospace">< previous</span>](2_Regression.livemd)

[<span style="float: right; color: #800080; font-weight: bold; font-family: FreeMono, monospace">next ></span>](4_Unsupervised.livemd)
